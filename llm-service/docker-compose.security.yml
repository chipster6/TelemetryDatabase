version: '3.8'

# Security-hardened Docker Compose for LLM Service
# This configuration implements defense-in-depth security practices

services:
  llm-service:
    build:
      context: .
      dockerfile: Dockerfile.secure
      args:
        - BUILDKIT_INLINE_CACHE=1
      # Security: Disable build-time secrets exposure
      secrets:
        - npm_token
    image: telemetry-llm-service:secure
    container_name: llm-service-secure
    
    # Security: Run as non-root user
    user: "10001:10001"
    
    # Security: Resource limits to prevent DoS
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
          pids: 100
        reservations:
          cpus: '1.0'
          memory: 4G
    
    # Security: Network isolation
    networks:
      - llm-internal
      - database-internal
    
    # Security: Port mapping with explicit interface binding
    ports:
      - "127.0.0.1:3001:3001"  # Bind only to localhost
    
    # Security: Environment variables with secrets
    environment:
      - NODE_ENV=production
      - PORT=3001
      - TELEMETRY_API_URL=http://telemetry-db:3000
      - TELEMETRY_WS_URL=ws://telemetry-db:3000
      - OLLAMA_HOST=http://localhost:11434
      - REDIS_URL=redis://redis:6379
      # Security: Use Docker secrets for sensitive data
      - ADMIN_API_TOKEN_FILE=/run/secrets/admin_token
      - OLLAMA_CERT_PINS_FILE=/run/secrets/ollama_certs
    
    # Security: Secrets management
    secrets:
      - admin_token
      - ollama_certs
      - npm_token
    
    # Security: Volume mounts with specific permissions
    volumes:
      - type: volume
        source: llm-data
        target: /app/data
        volume:
          nocopy: true
      - type: volume
        source: llm-logs
        target: /app/logs
        volume:
          nocopy: true
      - type: bind
        source: ./certs
        target: /app/certs
        read_only: true
    
    # Security: Capabilities and security options
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # Only if binding to privileged ports
    
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # May need adjustment based on CUDA requirements
    
    # Security: Read-only root filesystem with writable volumes
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security: Restart policy
    restart: unless-stopped
    
    depends_on:
      redis:
        condition: service_healthy
      telemetry-db:
        condition: service_healthy

  redis:
    image: redis:7.2.4-alpine@sha256:3134997edb04277814aa51a4175a588d45eb4299272f8eff2307bbf8b39e4d43
    container_name: redis-secure
    
    # Security: Run as non-root
    user: "999:999"
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security: Network isolation
    networks:
      - llm-internal
    
    # Security: Configuration
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --no-appendfsync-on-rewrite no
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
      --tcp-backlog 511
      --timeout 0
      --tcp-keepalive 300
    
    # Security: Volumes
    volumes:
      - type: volume
        source: redis-data
        target: /data
        volume:
          nocopy: true
    
    # Security: Security options
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    
    restart: unless-stopped

  telemetry-db:
    image: telemetry-database:secure
    container_name: telemetry-db-secure
    
    # Security: Network isolation
    networks:
      - database-internal
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped

  # Security: Network security scanner
  security-scanner:
    image: clair/clair:v4.7.1
    container_name: security-scanner
    networks:
      - security-internal
    profiles:
      - security
    command: ["clair", "-config", "/etc/clair/config.yaml"]
    volumes:
      - ./security/clair-config.yaml:/etc/clair/config.yaml:ro

# Security: Network definitions with isolation
networks:
  llm-internal:
    driver: bridge
    internal: false  # Needs external access for API calls
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  database-internal:
    driver: bridge
    internal: true  # Fully isolated internal network
    ipam:
      config:
        - subnet: 172.21.0.0/24
  
  security-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24

# Security: Volume definitions
volumes:
  llm-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/llm
  
  llm-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/llm
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

# Security: Secrets management
secrets:
  admin_token:
    file: ./secrets/admin_token.txt
  
  ollama_certs:
    file: ./secrets/ollama_cert_pins.txt
  
  npm_token:
    file: ./secrets/npm_token.txt

# Security: Extension for additional security tools
x-security-labels: &security-labels
  security.scan: "enabled"
  security.compliance: "SOC2,GDPR"
  security.level: "high"