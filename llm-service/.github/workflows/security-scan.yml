name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dockerfile
          - dependencies
          - secrets

env:
  IMAGE_NAME: telemetry-llm-service
  REGISTRY: ghcr.io

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      id: npm-audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level=high --json > npm-audit.json || true
        
        # Check for high/critical vulnerabilities
        CRITICAL_COUNT=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | .key' npm-audit.json 2>/dev/null | wc -l || echo "0")
        HIGH_COUNT=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' npm-audit.json 2>/dev/null | wc -l || echo "0")
        
        echo "critical_vulns=${CRITICAL_COUNT}" >> $GITHUB_OUTPUT
        echo "high_vulns=${HIGH_COUNT}" >> $GITHUB_OUTPUT
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Found $CRITICAL_COUNT critical npm vulnerabilities"
          exit 1
        elif [ "$HIGH_COUNT" -gt 0 ]; then
          echo "⚠️ Found $HIGH_COUNT high npm vulnerabilities"
        else
          echo "✅ No high/critical npm vulnerabilities found"
        fi

    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: npm-audit.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.secure
        push: false
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Hadolint (Dockerfile linting)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile.secure
        format: sarif
        output-file: hadolint-results.sarif
        failure-threshold: error

    - name: Upload Hadolint SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy for JSON output
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH'

    - name: Check Trivy results
      id: trivy-check
      run: |
        CRITICAL_COUNT=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' trivy-results.json 2>/dev/null | wc -l || echo "0")
        HIGH_COUNT=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' trivy-results.json 2>/dev/null | wc -l || echo "0")
        
        echo "critical_vulns=${CRITICAL_COUNT}" >> $GITHUB_OUTPUT
        echo "high_vulns=${HIGH_COUNT}" >> $GITHUB_OUTPUT
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Found $CRITICAL_COUNT critical container vulnerabilities"
          exit 1
        elif [ "$HIGH_COUNT" -gt 0 ]; then
          echo "⚠️ Found $HIGH_COUNT high container vulnerabilities"
        else
          echo "✅ No high/critical container vulnerabilities found"
        fi

    - name: Upload Trivy JSON results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results
        path: trivy-results.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --sarif-file-output=snyk-results.sarif

    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk-results.sarif

    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          -r
          --format=sarif
          --output=osv-results.sarif
          ./

    - name: Upload OSV Scanner results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: osv-results.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, secrets-scan, dependency-scan]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download scan artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./scan-results

    - name: Generate security summary
      id: security-summary
      run: |
        echo "# 🔒 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date -u)" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Add npm audit results
        if [ -f "./scan-results/npm-audit-results/npm-audit.json" ]; then
          CRITICAL_NPM=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | .key' ./scan-results/npm-audit-results/npm-audit.json 2>/dev/null | wc -l || echo "0")
          HIGH_NPM=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' ./scan-results/npm-audit-results/npm-audit.json 2>/dev/null | wc -l || echo "0")
          echo "## 📦 npm Dependencies" >> security-summary.md
          echo "- Critical: $CRITICAL_NPM" >> security-summary.md
          echo "- High: $HIGH_NPM" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        # Add Trivy results
        if [ -f "./scan-results/trivy-results/trivy-results.json" ]; then
          CRITICAL_TRIVY=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' ./scan-results/trivy-results/trivy-results.json 2>/dev/null | wc -l || echo "0")
          HIGH_TRIVY=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' ./scan-results/trivy-results/trivy-results.json 2>/dev/null | wc -l || echo "0")
          echo "## 🐳 Container Image" >> security-summary.md
          echo "- Critical: $CRITICAL_TRIVY" >> security-summary.md
          echo "- High: $HIGH_TRIVY" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        # Add recommendations
        echo "## 📋 Recommendations" >> security-summary.md
        echo "1. Review and address critical vulnerabilities immediately" >> security-summary.md
        echo "2. Update dependencies to latest secure versions" >> security-summary.md
        echo "3. Monitor for new security advisories" >> security-summary.md
        echo "4. Schedule regular security reviews" >> security-summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Create security issue
      if: failure() && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security Vulnerabilities Detected',
            body: `${summary}\n\n**Action Required:** Please review and address the security vulnerabilities found in the latest scan.\n\n**Commit:** ${{ github.sha }}`,
            labels: ['security', 'vulnerability', 'high-priority']
          });

  security-baseline:
    name: Security Baseline Check
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check security configurations
      run: |
        echo "🔍 Checking security configurations..."
        
        # Check if secure Dockerfile exists
        if [ -f "Dockerfile.secure" ]; then
          echo "✅ Secure Dockerfile found"
        else
          echo "❌ Secure Dockerfile not found"
          exit 1
        fi
        
        # Check if security Docker Compose exists
        if [ -f "docker-compose.security.yml" ]; then
          echo "✅ Secure Docker Compose configuration found"
        else
          echo "❌ Secure Docker Compose configuration not found"
          exit 1
        fi
        
        # Check for security documentation
        if [ -f "DOCKER_SECURITY.md" ]; then
          echo "✅ Security documentation found"
        else
          echo "❌ Security documentation not found"
          exit 1
        fi
        
        # Check for security scan script
        if [ -f "scripts/security-scan.sh" ]; then
          echo "✅ Security scan script found"
        else
          echo "❌ Security scan script not found"
          exit 1
        fi
        
        echo "🎉 Security baseline check passed"